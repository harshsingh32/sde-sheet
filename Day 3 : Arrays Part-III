//Search in a sorted 2D matrix

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
         int rowPointer = 0;
        int colPointer = matrix[0].length-1;
        while(rowPointer < matrix.length && colPointer >= 0){
            if(matrix[rowPointer][colPointer] == target) return true;
            else if(matrix[rowPointer][colPointer] > target) colPointer--;
            else rowPointer++;
        }
        return false;
    }
    }


//Pow(x,n)

class Solution {
    public double myPow(double x, int n) {
        double ans=1.0;
        long nn=n;
        if(nn<0) nn=-1*nn;
        while(nn>0){
            if(nn%2==1){
                ans = ans *x;
                nn=nn-1;
            }
            else{
                x=x*x;
                nn=nn/2;
            }
        }
        if(n<0)
        ans = (double)(1.0)/(double)(ans);
        return ans;
    }
}

//Majority Element (>n/2 times)

class Solution {
    public int majorityElement(int[] nums) {
        int n = nums.length;
        HashMap<Integer,Integer> hm = new HashMap<>();
        
        for(int i=0;i<n;i++){
            hm.put(nums[i],hm.getOrDefault(nums[i],0)+1);
        }

        for(int k: hm.keySet()){
            if(hm.get(k)>n/2){
                return k;
            }
        }
        return -1;
    }
}

//Majority Element (n/3 times)

class Solution {
    public int majorityElement(int[] nums) {
                int count = 0;
                int max = 0;
				for(int i =0 ; i<nums.length; i++) {
					if(count == 0) {
						max = nums[i];
					}
					if(nums[i] == max) {
						count++;
					} else {
						count--;
					}
				}

				return max;
    }
}

//Grid Unique Paths -DP

class Solution {
    public int uniquePaths(int m, int n) {
        int[][] paths = new int[m][n];
        for(int i=0;i<m;i++){
            paths[i][0] = 1;
        }

        for(int j=0;j<n;j++){
            paths[0][j] = 1;
        }

        for(int i=1;i<m;i++){
            for(int j=1;j<n;j++){
                paths[i][j] = paths[i-1][j] + paths[i][j-1];
            }
        }
        return paths[m-1][n-1];
    }
}

//Reverse Pairs - Merge Sort

class Solution {
    
    int merge(int[] nums,int low,int mid, int high){
        int count=0;
        int j = mid+1;
        for(int i=low;i<=mid;i++){
            while(j<=high && nums[i]>(2*(long)nums[j])){
                j++;
            }count+=j-(mid+1);
        }
        ArrayList<Integer> temp = new ArrayList<>();
        int left = low,right = mid+1;
        while(left<=mid && right<=high){
            if(nums[left]<=nums[right]){
                temp.add(nums[left++]);
            }
            else{
                temp.add(nums[right++]);
            }
        }
            while(left<=mid){
                temp.add(nums[left++]);
            }
            while(right<=high){
                temp.add(nums[right++]);
            }
            for(int i=low;i<=high;i++){
                nums[i] = temp.get(i-low);
            }
         return count;
    }

    int mergeSort(int[] nums,int low,int high){
        if(low>=high)  return 0;
        int mid = (low+high)/2;
        int inv = mergeSort(nums,low,mid);
        inv+= mergeSort(nums,mid+1,high);
        inv+= merge(nums,low,mid,high);
        return inv;
    }
    
    public int reversePairs(int[] nums) {
       return mergeSort(nums,0,nums.length-1);
    }
}





